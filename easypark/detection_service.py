import cv2
import torch
from django.apps import apps
from easypark.utils import update_parking_status  # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
import threading

is_active = False  # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
detection_thread = None  # ‡πÄ‡∏Å‡πá‡∏ö Thread ‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
current_location = None  # ‡πÄ‡∏Å‡πá‡∏ö location ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
stop_event = threading.Event()  # ‡πÉ‡∏ä‡πâ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏ò‡∏£‡∏î
CONFIDENCE_THRESHOLD = 0.40

_model = None  # ‡πÄ‡∏Å‡πá‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ Global

def load_model():
    global _model
    if _model is None:  # ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
        try:
            _model = torch.hub.load('ultralytics/yolov5', 'yolov5s')
            # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ confidence threshold ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•
            _model.conf = CONFIDENCE_THRESHOLD
        except Exception as e:
            print(f"‚ùå Error loading YOLOv5 model: {e}")
            _model = None
    return _model


def get_camera_url(location_id):
    ParkingLocation = apps.get_model('easypark', 'ParkingLocation')
    try:
        location = ParkingLocation.objects.get(id=location_id)
        return location.camera_url
    except ParkingLocation.DoesNotExist:
        return None
    except Exception as e:
        print(f"‚ö†Ô∏è Error retrieving camera URL: {e}")
        return None

def get_rois_from_db(location_id):
    ROI = apps.get_model('easypark', 'ROI')
    ParkingLocation = apps.get_model('easypark', 'ParkingLocation')

    try:
        location = ParkingLocation.objects.get(id=location_id)
        rois = ROI.objects.filter(location=location, parking_spot__location=location)

        roi_list = []
        for roi in rois:
            spot = roi.parking_spot
            if spot:
                roi_list.append((spot.spot_number, roi.x_position, roi.y_position, roi.width, roi.height))

        return roi_list
    except ParkingLocation.DoesNotExist:
        return []
    except Exception as e:
        print(f"‚ùå Error retrieving ROIs: {e}")
        return []
    

def start_detection_in_background(selected_location):
    global is_active, detection_thread, current_location, stop_event

    # ‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏¥‡∏° -> ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
    if is_active and current_location == selected_location:
        print("‚ö†Ô∏è Detection is already running at the same location. Ignoring request.")
        return  

    # ‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡∏∑‡πà‡∏ô‡∏≠‡∏¢‡∏π‡πà -> ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏ò‡∏£‡∏î‡πÄ‡∏Å‡πà‡∏≤
    if is_active and current_location != selected_location:
        print(f"üîÑ Changing location from {current_location} to {selected_location}. Restarting detection...")
        stop_detection()

    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÉ‡∏´‡∏°‡πà
    is_active = True  
    current_location = selected_location
    stop_event.clear()  # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï stop_event ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ
    detection_thread = threading.Thread(target=detect_cars, args=(int(selected_location),), daemon=True)
    detection_thread.start()
    print(f"üöó Starting detection for location: {selected_location}")

def stop_detection():
    global is_active, detection_thread, stop_event

    if is_active:
        print(f"üõë Stopping detection at location {current_location}...")
        is_active = False
        stop_event.set()  # ‡πÅ‡∏à‡πâ‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏ò‡∏£‡∏î‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô

        if detection_thread is not None:
            detection_thread.join()  # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏ò‡∏£‡∏î‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô
        detection_thread = None
        print("‚úÖ Detection fully stopped.")

def detect_cars(selected_location):
    global is_active
    print(f"üöó Starting detection for location: {selected_location}")

    model = load_model()
    if not model:
        print("‚ùå Model loading failed. Aborting detection.")
        return

    camera_url = get_camera_url(selected_location)
    if not camera_url:
        print(f"‚ùå No camera URL for location {selected_location}. Stopping detection.")
        is_active = False
        return

    cap = cv2.VideoCapture(camera_url)
    if not cap.isOpened():
        print(f"‚ùå Unable to open camera: {camera_url}")
        is_active = False
        return

    current_rois = get_rois_from_db(selected_location)
    if not current_rois:
        print(f"‚ùå No ROIs defined for location: {selected_location}")
        return

    while not stop_event.is_set():  # ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠ stop_event ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
        ret, frame = cap.read()
        if not ret:
            break

        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏™‡πà‡∏á conf parameter
        results = model(frame)
        detections = results.pandas().xyxy[0]  

        update_parking_status(current_rois, detections, selected_location)

        if stop_event.is_set():  
            break  

        if cv2.waitKey(3000) & 0xFF == ord('q'):  
            break  

    cap.release()
    cv2.destroyAllWindows()
    print(f"üöó Detection stopped for location: {selected_location}")

