import time
from django.apps import apps
DETECTION_DELAY = 3  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
# ‡πÉ‡∏ä‡πâ dictionary ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡πà‡∏≠‡∏á‡∏à‡∏≠‡∏î
spot_timers = {}

def update_parking_status(rois, detections, location_name):
    """
    ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ä‡πà‡∏≠‡∏á‡∏à‡∏≠‡∏î‡∏£‡∏ñ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
    """
    ParkingSpot = apps.get_model('easypark', 'ParkingSpot')
    ParkingLocation = apps.get_model('easypark', 'ParkingLocation')

    try:
        location = ParkingLocation.objects.get(id=int(location_name)) if str(location_name).isdigit() \
            else ParkingLocation.objects.get(name=location_name)
    except ParkingLocation.DoesNotExist:
        print(f"‚ùå Location '{location_name}' does not exist.")
        return

    print(f"üîç Updating parking status for location: {location.name} (ID {location.id})")

    current_time = time.time()

    for roi in rois:
        spot_number, x, y, w, h = roi
        detected = False

        for _, row in detections.iterrows():
            label = row['name']
            #print("label",label)
            x1, y1, x2, y2 = int(row['xmin']), int(row['ymin']), int(row['xmax']), int(row['ymax'])
            if label == 'car' or label == 'truck' and (x1 < x + w and x2 > x and y1 < y + h and y2 > y):
                detected = True
                break

        

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏£‡∏ñ‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏à‡∏≠‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if detected:
            if spot_number not in spot_timers:
                spot_timers[spot_number] = current_time  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠‡∏£‡∏ñ
            elif current_time - spot_timers[spot_number] >= DETECTION_DELAY:  # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡∏Ñ‡πà‡∏≠‡∏¢‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
                try:
                    parking_spot = ParkingSpot.objects.get(spot_number=spot_number, location=location)
                    parking_spot.is_available = False  # ‡∏°‡∏µ‡∏£‡∏ñ‡∏à‡∏≠‡∏î
                    parking_spot.save()
                    print(f"‚úÖ Updated spot {spot_number}: Occupied")
                except ParkingSpot.DoesNotExist:
                    print(f"‚ùå Parking spot {spot_number} in location '{location.name}' does not exist.")
        else:
            spot_timers.pop(spot_number, None)  # ‡∏ñ‡πâ‡∏≤‡∏£‡∏ñ‡∏≠‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô 3 ‡∏ß‡∏¥ ‡πÉ‡∏´‡πâ‡∏•‡∏ö timer ‡∏≠‡∏≠‡∏Å

            try:
                parking_spot = ParkingSpot.objects.get(spot_number=spot_number, location=location)
                parking_spot.is_available = True  # ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà
                parking_spot.save()
                print(f"‚úÖ Updated spot {spot_number}: Available")
            except ParkingSpot.DoesNotExist:
                print(f"‚ùå Parking spot {spot_number} in location '{location.name}' does not exist.")

        

